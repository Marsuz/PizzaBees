package gui;

import app.AppInput;
import app.savedSate.SavedState;
import com.google.gson.JsonParseException;
import com.google.gson.JsonSyntaxException;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import model.Courier;
import model.Restaurant;
import solver.SolverParameters;
import solver.setting.SettingFactory;
import solver.setting.random.RandomSettingFactory;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Locale;

/**
 * Created by sjchmiela on 26.04.2016.
 */
public class Dashboard extends JFrame implements WorkerGraphicalManager {
    private JPanel rootPanel;
    private JTextArea inputTextArea;
    private JTextField fileTextField;
    private JButton chooseFileButton;
    private JButton runButton;
    private JProgressBar progressBar;
    private JLabel progressLabel;
    private JSlider wagesSlider;
    private JTextField scoutsTextField;
    private JLabel wagesLabel;
    private JTextField eliteQuantityTextField;
    private JTextField normalQuantityTextField;
    private JTextField selectedSitesTextField;
    private JTextField bestSitesTextField;
    private JTextField iterationsTextField;
    private JTextField movesTextField;

    private JFileChooser fileChooser = new JFileChooser();

    private SolverParameters solverParameters;
    private SwingWorker appWorker = null;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 1, new Insets(15, 15, 15, 15), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setEnabled(true);
        rootPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(280, -1), null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        fileTextField = new JTextField();
        fileTextField.setAlignmentX(0.5f);
        fileTextField.setEditable(false);
        fileTextField.setHorizontalAlignment(2);
        panel3.add(fileTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chooseFileButton = new JButton();
        chooseFileButton.setText("Choose file");
        panel3.add(chooseFileButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(3, 3, 3, 3), -1, -1));
        panel2.add(panel4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel4.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        inputTextArea = new JTextArea();
        inputTextArea.setFont(new Font("Monospaced", Font.PLAIN, inputTextArea.getFont().getSize()));
        inputTextArea.setLineWrap(true);
        scrollPane1.setViewportView(inputTextArea);
        final JLabel label1 = new JLabel();
        label1.setText("Input file");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        panel2.add(separator1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        panel1.add(scrollPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(320, -1), new Dimension(320, -1), new Dimension(320, -1), 0, false));
        scrollPane2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(19, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane2.setViewportView(panel5);
        final Spacer spacer1 = new Spacer();
        panel5.add(spacer1, new GridConstraints(18, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Selected sites");
        panel5.add(label2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Solver options");
        panel5.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator2 = new JSeparator();
        panel5.add(separator2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Wages");
        panel5.add(label4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel5.add(panel6, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        wagesSlider = new JSlider();
        wagesSlider.setMaximum(100);
        wagesSlider.setPaintLabels(false);
        wagesSlider.setPaintTicks(false);
        wagesSlider.setPaintTrack(true);
        wagesSlider.setSnapToTicks(false);
        wagesSlider.setValue(50);
        panel6.add(wagesSlider, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Distance");
        panel6.add(label5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Time");
        panel6.add(label6, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        wagesLabel = new JLabel();
        wagesLabel.setText("1:1");
        panel6.add(wagesLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("Best sites");
        panel5.add(label7, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("Elite quantity");
        panel5.add(label8, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scoutsTextField = new JTextField();
        panel5.add(scoutsTextField, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("Scouts number");
        panel5.add(label9, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        eliteQuantityTextField = new JTextField();
        panel5.add(eliteQuantityTextField, new GridConstraints(11, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("Normal quantity");
        panel5.add(label10, new GridConstraints(12, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        normalQuantityTextField = new JTextField();
        panel5.add(normalQuantityTextField, new GridConstraints(13, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        selectedSitesTextField = new JTextField();
        panel5.add(selectedSitesTextField, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        bestSitesTextField = new JTextField();
        panel5.add(bestSitesTextField, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label11 = new JLabel();
        label11.setText("Iterations");
        panel5.add(label11, new GridConstraints(14, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        iterationsTextField = new JTextField();
        panel5.add(iterationsTextField, new GridConstraints(15, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label12 = new JLabel();
        label12.setText("Moves distance");
        panel5.add(label12, new GridConstraints(16, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        movesTextField = new JTextField();
        panel5.add(movesTextField, new GridConstraints(17, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel7, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel7.add(panel8, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        progressBar = new JProgressBar();
        panel8.add(progressBar, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel7.add(panel9, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        runButton = new JButton();
        runButton.setText("Run");
        panel9.add(runButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel9.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        progressLabel = new JLabel();
        progressLabel.setText("");
        panel9.add(progressLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private class SliderChangeListener implements ChangeListener {
        Dashboard d;

        SliderChangeListener(Dashboard d) {
            this.d = d;
        }

        @Override
        public void stateChanged(ChangeEvent e) {
            d.updateWagesLabel();
        }
    }

    private class ChooseActionListener implements ActionListener {
        Dashboard d;

        ChooseActionListener(Dashboard d) {
            this.d = d;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            d.chooseFileOfInput();
        }
    }

    private class RunActionListener implements ActionListener {
        Dashboard d;

        RunActionListener(Dashboard d) {
            this.d = d;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            d.runButtonClicked();
        }
    }

    /**
     * Returns JFrame object properly configured for showing with `setVisible(true)`.
     */
    Dashboard() {
        super("PizzaBees");
        System.out.println(wagesSlider);
        solverParameters = new SolverParameters();
        wagesSlider.addChangeListener(new SliderChangeListener(this));
        updateWagesLabel();
        fileChooser.setFileFilter(new FileNameExtensionFilter("JSON input file", "json"));
        chooseFileButton.addActionListener(new ChooseActionListener(this));
        runButton.addActionListener(new RunActionListener(this));
        setContentPane(rootPanel);
        setMinimumSize(new Dimension(640, 400));
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    }

    private void updateWagesLabel() {
        int distanceValue = wagesSlider.getMaximum() - wagesSlider.getValue();
        int timeValue = wagesSlider.getValue();
        double distanceWage = (double) distanceValue / Math.max(distanceValue, timeValue);
        double timeWage = (double) timeValue / Math.max(distanceValue, timeValue);
        solverParameters.setDistanceWage(distanceWage);
        solverParameters.setTimeWage(timeWage);
        wagesLabel.setText(String.format(Locale.forLanguageTag("pl_PL"), "%.2f:%.2f", distanceWage, timeWage));
    }

    /**
     * Convenience method for opening file chooser dialog and reading the path to file text field.
     */
    private void chooseFileOfInput() {
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String selectedFilePath = fileChooser.getSelectedFile().getAbsolutePath();
            try {
                String selectedFileContents = new String(Files.readAllBytes(Paths.get(selectedFilePath)));
                inputTextArea.setText(selectedFileContents);
                fileTextField.setText(selectedFilePath);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(rootPanel,
                        "Could not read file.\n" + e.getLocalizedMessage(),
                        "File read error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Returns AppWorker object with configured access to progressLabel.
     * Also, the worker has already property change listener bound.
     *
     * @return AppWorker object
     * @see AppWorker
     * @see AppWorkerPropertyChangeListener
     */
    private SwingWorker initializeAppWorker() throws IOException {
        SavedState state = AppInput.stringToState(this.inputTextArea.getText());
        Restaurant.P = state.getP();
        Courier.velocity = state.getV();

        if (state == null) {
            throw new IOException("Could not deserialize state.");
        }

        SettingFactory settingFactory = new RandomSettingFactory(state.getRestaurants(), state.getOrders());

        solverParameters.setScouts(Integer.parseInt(scoutsTextField.getText()));
        solverParameters.setSelectedSites(Integer.parseInt(selectedSitesTextField.getText()));
        solverParameters.setBestSites(Integer.parseInt(bestSitesTextField.getText()));
        solverParameters.setEliteQuantity(Integer.parseInt(eliteQuantityTextField.getText()));
        solverParameters.setNormalQuantity(Integer.parseInt(normalQuantityTextField.getText()));
        solverParameters.setIterations(Integer.parseInt(iterationsTextField.getText()));
        solverParameters.setMoves(Integer.parseInt(movesTextField.getText()));

        SolverWorker worker = new SolverWorker(this, settingFactory, solverParameters);
        worker.addPropertyChangeListener(new AppWorkerPropertyChangeListener(this, worker));
        return worker;
    }

    /**
     * Handler called when run button is clicked. Executes or cancels worker.
     *
     * @see AppWorker
     */
    private void runButtonClicked() {
        if (appWorker == null || appWorker.isCancelled() || appWorker.isDone()) {
            try {
                appWorker = initializeAppWorker();
                appWorker.execute();
            } catch (JsonSyntaxException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error in JSON syntax", JOptionPane.ERROR_MESSAGE);
            } catch (JsonParseException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error in JSON parsing", JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Could not parse one of the parameters as integer.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                prepareInterfaceForWorker(appWorker != null && !appWorker.isDone() && !appWorker.isCancelled());
            }
        } else {
            appWorker.cancel(true);
            appWorker = null;
            prepareInterfaceForWorker(false);
        }
    }

    /**
     * Updates interface according to worker state.
     *
     * @param running State of the worker
     * @see AppWorker
     */
    public void prepareInterfaceForWorker(boolean running) {
        boolean controlsEnabled = !running;

        wagesSlider.setEnabled(controlsEnabled);
        scoutsTextField.setEnabled(controlsEnabled);
        eliteQuantityTextField.setEnabled(controlsEnabled);
        normalQuantityTextField.setEnabled(controlsEnabled);
        selectedSitesTextField.setEnabled(controlsEnabled);
        bestSitesTextField.setEnabled(controlsEnabled);
        iterationsTextField.setEnabled(controlsEnabled);
        movesTextField.setEnabled(controlsEnabled);

        inputTextArea.setEnabled(controlsEnabled);
        fileTextField.setEnabled(controlsEnabled);
        chooseFileButton.setEnabled(controlsEnabled);

        runButton.setText(running ? "Cancel" : "Run");

        progressBar.setValue(0);
        progressLabel.setText("");
    }

    /**
     * Updates progress bar according to the new progress.
     *
     * @see JProgressBar
     * @see WorkerGraphicalManager
     */
    public void setProgress(int progress) {
        progressBar.setValue(progress);
    }

    public void setDetailedProgressMessage(String message) {
        progressLabel.setText(message);
    }

    /**
     * Shows message dialog to the user with specified title, message and dialog type.
     *
     * @param message     Message shown in the dialog.
     * @param title       Title of the dialog.
     * @param messageType Type of the dialog, one of the JOptionPane constants.
     * @see JOptionPane
     * @see WorkerGraphicalManager
     */
    public void showMessageDialog(Object message, String title, int messageType) {
        JOptionPane.showMessageDialog(this, message, title, messageType);
    }

    /**
     * Shows result dialog to the user with specified title, message and result.
     *
     * @param message Message shown in the dialog.
     * @param title   Title of the dialog.
     * @param result  Result shown in text area of the dialog.
     * @see ResultDialog
     * @see WorkerGraphicalManager
     */
    public void showResultDialog(String message, String title, String result) {
        SwingUtilities.invokeLater(() -> {
            ResultDialog dialog = new ResultDialog(
                    title,
                    message,
                    result
            );
            dialog.pack();
            dialog.setVisible(true);
        });
    }
}
